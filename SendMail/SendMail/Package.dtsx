<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/30/2015 10:18:39 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="EQUIPOC03"
  DTS:CreatorName="LABLET\rgallegosg"
  DTS:DTSID="{138998EF-954F-4E00-9D28-1CE122A4AD36}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.5058.0"
  DTS:LocaleID="2058"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="84"
  DTS:VersionGUID="{A92B2870-21D9-4864-8644-F22928ED0910}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Send Mail"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{989348DE-4C01-48AE-B6BD-4CBD108F5303}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Send Mail"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_12a5a28bf37e48108672685c45eebb58"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12a5a28bf37e48108672685c45eebb58.Properties.Settings.get_Default():ST_12a5a28bf37e48108672685c45eebb58.Properties.Sett" +
    "ings")]

namespace ST_12a5a28bf37e48108672685c45eebb58.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_12a5a28bf37e48108672685c45eebb58.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{198D9FC7-40CA-42BE-A261-869C2AE8F7F4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_12a5a28bf37e48108672685c45eebb58</RootNamespace>
    <AssemblyName>ST_12a5a28bf37e48108672685c45eebb58</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

using System.Net;
using System.Net.Mail;
using System.Collections;
using System.Data.OleDb;

#endregion

namespace ST_12a5a28bf37e48108672685c45eebb58
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        private void sendMail(String fromAddress,String passwd,String[] toAddress,String subject,String body) {
            MailMessage mail = new MailMessage();
            SmtpClient SmtpServer = new SmtpClient("smtp.gmail.com", 587);
            /*
                Yahoo!      smtp.mail.yahoo.com 	587
                GMail 	    smtp.gmail.com 	        587
                Hotmail 	smtp.live.com 	        587
             */
            mail.From = new MailAddress( fromAddress );

            for (int i = 0; i < toAddress.Length; i++)
            {
                MessageBox.Show("Adding: "+toAddress[i]);
                mail.To.Add(toAddress[i]);
            }

            mail.Subject = subject;
            mail.Body = body;

            /*System.Net.Mail.Attachment attachment;
            attachment = new System.Net.Mail.Attachment(@"C:\Users\rgallegosg\Desktop\SLAComplains.xlsx");
            mail.Attachments.Add(attachment);*/

            SmtpServer.Credentials = new System.Net.NetworkCredential(fromAddress, passwd);
            SmtpServer.EnableSsl = true;

            MessageBox.Show("Sending");
            try
            {
                SmtpServer.Send(mail);
                //SmtpServer.SendAsync( mail, mail.To);
                MessageBox.Show("Sended");
            }
            catch (Exception ex) { MessageBox.Show("Ex: "+ex.ToString()); }
        }

        private bool checkFiles(String filePath,String fileName, String sheet) {

            String xlsFile = System.IO.Path.Combine(filePath,fileName);

            OleDbConnectionStringBuilder cb = new OleDbConnectionStringBuilder();
            cb.DataSource = xlsFile;

            if (System.IO.Path.GetExtension(xlsFile).ToUpper() == ".XLS")
            {
                cb.Provider = "Microsoft.Jet.OLEDB.4.0";
                cb.Add("Extended Properties", "Excel 8.0;HDR=YES;IMEX=0;");
            }
            else if (System.IO.Path.GetExtension(xlsFile).ToUpper() == ".XLSX")
            {
                cb.Provider = "Microsoft.ACE.OLEDB.12.0";
                cb.Add("Extended Properties", "Excel 12.0 Xml;HDR=YES;IMEX=0;");
            }

            /****LECTURA****/
            DataTable dt = new DataTable();
            using (OleDbConnection conn = new OleDbConnection(cb.ConnectionString))
            {
                conn.Open();

                using (OleDbCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = "SELECT * FROM ["+sheet+"$]";
                    OleDbDataAdapter da = new OleDbDataAdapter(cmd);
                    da.Fill(dt);
                }
                conn.Close();
            }
            if (dt.Rows.Count == 0) return false;

            return true;
        }

		public void Main()
		{
			// TODO: Add your code here

            String emails = @"C:\Users\rgallegosg\Desktop\SendMail\SendMail\toMails.txt";
            String sourceFile = @"C:\Users\rgallegosg\Desktop\ETL Integration Services\FilesXLS";

            String body = null;

            int counter = 0;

            if (!checkFiles(sourceFile, "GNP.xlsx", "Incidentes")) { body += "Incidentes de GNP\n"; counter++; }
            if (!checkFiles(sourceFile, "GNP.xlsx", "Tareas")){ body += "Tareas de GNP\n"; counter++; }
            if (!checkFiles(sourceFile, "GNP.xlsx", "SRs")){ body += "SRs de GNP\n"; counter++; }
            
            if (!checkFiles(sourceFile, "Remedy.xlsx", "Incidents CSS & DSS")){ body += "Incidentes de Remedy (CSS & DSS)\n"; counter++; }
            if (!checkFiles(sourceFile, "Remedy.xlsx", "Request CSS & DSS")){ body += "Request de Remedy (CSS & DSS)\n"; counter++; }
            if (!checkFiles(sourceFile, "Remedy.xlsx", "Incidents TSS")){ body += "Incidentes de Remedy (TSS)\n"; counter++; }
            if (!checkFiles(sourceFile, "Remedy.xlsx", "Request TSS")){ body += "Request de Remedy (TSS)\n"; counter++; }

            if (!checkFiles(sourceFile, "SM9.xlsx", "Hoja1")){ body += "SM9\n"; counter++; }
            if (!checkFiles(sourceFile, "VWM.xlsx", "Hoja1")){ body += "VWM\n"; counter++; }

            if (counter > 0)
            {
                MessageBox.Show("Sending email");
                sendMail("inmreportes@gmail.com",                       //FROM
                    "inmreports2013",                                   //PASSWD
                    System.IO.File.ReadAllLines(emails),                //TO
                    "ETL Reporting Services Notification",              //SUBJECT
                    "Aun no han sido cargados los tickets de:\n"+body    //BODY
                );   
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}


/*
 GNP
 * Incidentes
 * Tareas
 * SRs
 Remedy
 * Incidents CSS & DSS
 * Request CSS & DSS
 * Incidents TSS
 * Request TSS
 SM9
 * Hoja1
 VWM
 * Hoja1
 */]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_12a5a28bf37e48108672685c45eebb58</msb:CodeName>
		<msb:DisplayName>ST_12a5a28bf37e48108672685c45eebb58</msb:DisplayName>
		<msb:Language>msBuild</msb:Language>
		<msb:ProjectId>{222BD09D-7D8A-40B2-84AC-E5CCCB4FAC3B}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_12a5a28bf37e48108672685c45eebb58.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_12a5a28bf37e48108672685c45eebb58")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_12a5a28bf37e48108672685c45eebb58")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12a5a28bf37e48108672685c45eebb58.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12a5a28bf37e48108672685c45eebb58.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12a5a28bf37e48108672685c45eebb58.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_12a5a28bf37e48108672685c45eebb58.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_12a5a28bf37e48108672685c45eebb58.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_12a5a28bf37e48108672685c45eebb58.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPnGUFUAAAAAAAAAAOAAAiELAQsAAB4AAAAIAAAAAAAALjwA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANg7AABTAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAANBwAAAAgAAAAHgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAgAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAQ
PAAAAAAAAEgAAAACAAUAECUAAMgWAAABAAAAAAAAAFgkAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswAwCuAAAAAgAAEXMWAAAKCnJzAABwIEsCAABzFwAACgsGA3MYAAAK
bxkAAAoWDCslcpEAAHAFCJooGgAACigbAAAKJgZvHAAACgUImm8dAAAKCBdYDAgFjmky1QYOBG8e
AAAKBg4Fbx8AAAoHAwRzIAAACm8hAAAKBxdvIgAACnKjAABwKBsAAAomBwZvIwAACnKzAABwKBsA
AAom3hkNcsEAAHAJbyQAAAooGgAACigbAAAKJt4AKgAAARAAAAAAgAAUlAAZJAAAARswBAD9AAAA
AwAAEQMEKCUAAAoKcyYAAAoLBwZvJwAACgYoKAAACm8pAAAKcssAAHAoKgAACiwdB3LVAABwbysA
AAoHcgUBAHByLQEAcG8sAAAKKzIGKCgAAApvKQAACnJhAQBwKCoAAAosGwdybQEAcG8rAAAKB3IF
AQBwcp8BAHBvLAAACnMtAAAKDAdvLgAACnMvAAAKDQlvMAAACglvMQAAChMEEQQXbzIAAAoRBHLd
AQBwBXL9AQBwKDMAAApvNAAAChEEczUAAAoTBREFCG82AAAKJt4MEQQsBxEEbzcAAArcCW84AAAK
3goJLAYJbzcAAArcCG85AAAKbzoAAAotAhYqFyoAAAABHAAAAgCbADPOAAwAAAAAAgCNAFXiAAoA
AAAAEzAHAI0BAAAEAAARcgMCAHAKcncCAHALFAwWDQIHcvMCAHByBQMAcCgJAAAGLRAIchsDAHAo
GgAACgwJF1gNAgdy8wIAcHJBAwBwKAkAAAYtEAhyTwMAcCgaAAAKDAkXWA0CB3LzAgBwcm0DAHAo
CQAABi0QCHJ1AwBwKBoAAAoMCRdYDQIHco0DAHBypQMAcCgJAAAGLRAIcs0DAHAoGgAACgwJF1gN
AgdyjQMAcHIRBABwKAkAAAYtEAhyNQQAcCgaAAAKDAkXWA0CB3KNAwBwcnMEAHAoCQAABi0QCHKP
BABwKBoAAAoMCRdYDQIHco0DAHByxwQAcCgJAAAGLRAIct8EAHAoGgAACgwJF1gNAgdyEQUAcHIj
BQBwKAkAAAYtEAhyLwUAcCgaAAAKDAkXWA0CB3I5BQBwciMFAHAoCQAABi0QCHJLBQBwKBoAAAoM
CRdYDQkWMTFyVQUAcCgbAAAKJgJycQUAcHKdBQBwBig7AAAKcrsFAHByAwYAcAgoGgAACigIAAAG
Aig8AAAKFm89AAAKKh4CKD4AAAoqAAAAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291
cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1u
ZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMu
UnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAA
djQuMC4zMDMxOQAAAAAFAGwAAAB4BQAAI34AAOQFAAB8CAAAI1N0cmluZ3MAAAAAYA4AAFgGAAAj
VVMAuBQAABAAAAAjR1VJRAAAAMgUAAAAAgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJAwAAAPolMwAW
AAABAAAANAAAAAUAAAAGAAAACwAAAAkAAAA+AAAAAgAAAA8AAAAEAAAAAgAAAAMAAAAEAAAAAQAA
AAUAAAABAAAAAQAAAAAACgABAAAAAAAGAMEAugAKAN0AyAAOAD0BFAEGAFkBugAGAG8BXgEGAKAB
iwEGAK0CkwIGANgCxgIGAO8CxgIGAAwDxgIGACsDxgIGAEQDxgIGAF0DxgIGAHgDxgIGAJMDxgIG
AKwDxgIGAOUDxQMGAAUExQMGADYEIwQGAFMEugAGAFgEugAGAHwExgIKAKgEkgQKAMEEkgQGANYE
xQMOAPgEFAEKACoFGgUKADYFGgUKAEEFGgUGAFYFugASAHkFZAUSAIQFZAUKAJYFGgUKANcFzAUK
AOkFzAUGACgGugAGADwGMgYWAGcGVQYWANQGwQYWAO4GSQYWAA0HVQYWAB0HwQYWAC8HVQYWAEoH
wQYWAFQHSQYWAIAHVQYWAJEHwQYGAKQHugAWAL4HSQYWANkHSQYGAP4HMgYOABAIFAEAAAAAAQAA
AAAAAQABAAAAEAAyADwABQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAA
EQAEAAwAEQB/ARMAEQCsARcAEQD2ATkABgYzAlgAVoA7AlsAVoBDAlsAUCAAAAAAgxi8ARsAAQBY
IAAAAACTCMIBHwABAJEgAAAAAJMI1gEkAAEAmCAAAAAAkwjiASkAAQCgIAAAAACWCAYCPQACALMg
AAAAAIYYvAEbAAIApyAAAAAAkRjxBJoAAgC8IAAAAACBABoCRwACAIghAAAAAIEAIwJRAAcAsCIA
AAAAhgAuAhsACgBJJAAAAACGGLwBGwAKAAAAAQBLAgAAAQBRAgAAAgBdAgAAAwBkAgAABABuAgAA
BQB2AgAAAQB7AgAAAgCEAgAAAwCNAjkAvAFpAEEAvAFpAEkAvAFpAFEAvAFpAFkAvAFpAGEAvAFp
AGkAvAFpAHEAvAFpAHkAvAFpAIEAvAFpAIkAvAFuAJEAvAEbAJkAvAEbAAkAvAEbAKEAagRzAKEA
hQR6ACkAvAF/ALkAvAGLAMkAvAEbABEAvAEbANEAvAEbANkAvAEbAOEAvAGeAOkAvAFpANkATQWk
APEAXQWqAPkAkQWwANkArAW3AAkBswVpANkAtwVpANkAwwVpABEBvAG9AOEA/AXDAOEADAbKAOEA
GgbPAAkAHwbVACkBQQaqADEBvAEbADEBhAZpACkBkwbkAPEAoAbVAPEAqAbpADEBtAZpADkBswXv
AEEBvAEbADkB+AbVAEkBvAFpAFEBKgcbAEkBPAf1AGEBYAf7APEAXQUCAWEBcAdpAHEBvAEJAXkB
nwcQAYEBsAcbAFEBuAcbAEEB0AcXAZEB9AcdAZkBAwg0ARkAIgg6AaEBKghuABkAvAEbAAgAFABf
AAgAGABkACkAkwCRAC4AGwC4AS4AIwC4AS4AYwDeAS4ACwBHAS4AEwCPAS4AMwCPAS4AKwC4AS4A
OwC+AS4AQwC4AS4AWwDVAUMAawBkAEkAkwCRAGEAmwBkAIMAqwBkAIYA2QAhAUABAgABAAMAAwAA
AG8BLwAAAO4BNAAAABICQgACAAIAAwACAAMABQABAAQABQACAAUABwAEgAAAAQAAAOkVzEAAAAAA
AAB/AAAABAAAAAAAAAAAAAAAAQCxAAAAAAAEAAAAAAAAAAAAAAABALoAAAAAAAsAAAAAAAAAAAAA
AAoA9QAAAAAABAAAAAAAAAAAAAAAAQBkBQAAAAAEAAAAAAAAAAAAAAABAEkGAAAAAAAAAAABAAAA
OQgAAAUABAAAAAA8TW9kdWxlPgBTVF8xMmE1YTI4YmYzN2U0ODEwODY3MjY4NWM0NWVlYmI1OC5k
bGwAUmVzb3VyY2VzAFNUXzEyYTVhMjhiZjM3ZTQ4MTA4NjcyNjg1YzQ1ZWViYjU4LlByb3BlcnRp
ZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8xMmE1YTI4YmYzN2U0ODEwODY3MjY4NWM0NWVlYmI1
OABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRp
b24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2NyaXB0T2Jq
ZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3Vy
Y2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5j
dG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBk
ZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABzZW5kTWFpbABjaGVja0ZpbGVzAE1h
aW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAZnJvbUFkZHJlc3MAcGFzc3dkAHRvQWRk
cmVzcwBzdWJqZWN0AGJvZHkAZmlsZVBhdGgAZmlsZU5hbWUAc2hlZXQAU3lzdGVtLlJ1bnRpbWUu
VmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNz
ZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5
Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQ
cm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVt
YXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRy
aWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRp
b25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9z
dGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRN
b2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGls
ZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJp
YnV0ZQBTeXN0ZW0uTmV0Lk1haWwATWFpbE1lc3NhZ2UAU210cENsaWVudABNYWlsQWRkcmVzcwBz
ZXRfRnJvbQBTdHJpbmcAQ29uY2F0AFN5c3RlbS5XaW5kb3dzLkZvcm1zAE1lc3NhZ2VCb3gARGlh
bG9nUmVzdWx0AFNob3cATWFpbEFkZHJlc3NDb2xsZWN0aW9uAGdldF9UbwBBZGQAc2V0X1N1Ympl
Y3QAc2V0X0JvZHkAU3lzdGVtLk5ldABOZXR3b3JrQ3JlZGVudGlhbABJQ3JlZGVudGlhbHNCeUhv
c3QAc2V0X0NyZWRlbnRpYWxzAHNldF9FbmFibGVTc2wAU2VuZABUb1N0cmluZwBFeGNlcHRpb24A
U3lzdGVtLklPAFBhdGgAQ29tYmluZQBTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBPbGVE
YkNvbm5lY3Rpb25TdHJpbmdCdWlsZGVyAHNldF9EYXRhU291cmNlAEdldEV4dGVuc2lvbgBUb1Vw
cGVyAG9wX0VxdWFsaXR5AHNldF9Qcm92aWRlcgBTeXN0ZW0uRGF0YS5Db21tb24ARGJDb25uZWN0
aW9uU3RyaW5nQnVpbGRlcgBEYXRhVGFibGUAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAT2xlRGJDb25u
ZWN0aW9uAERiQ29ubmVjdGlvbgBPcGVuAE9sZURiQ29tbWFuZABDcmVhdGVDb21tYW5kAERiQ29t
bWFuZABDb21tYW5kVHlwZQBzZXRfQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRUZXh0AE9sZURiRGF0
YUFkYXB0ZXIARGJEYXRhQWRhcHRlcgBGaWxsAElEaXNwb3NhYmxlAERpc3Bvc2UAQ2xvc2UARGF0
YVJvd0NvbGxlY3Rpb24AZ2V0X1Jvd3MASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAZ2V0X0Nv
dW50AEZpbGUAUmVhZEFsbExpbmVzAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMAc2V0X1Rhc2tS
ZXN1bHQAU1RfMTJhNWEyOGJmMzdlNDgxMDg2NzI2ODVjNDVlZWJiNTguUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAABxUwBUAF8AMQAyAGEANQBhADIAOABiAGYAMwA3AGUANAA4ADEAMAA4
ADYANwAyADYAOAA1AGMANAA1AGUAZQBiAGIANQA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIA
ZQBzAG8AdQByAGMAZQBzAAAdcwBtAHQAcAAuAGcAbQBhAGkAbAAuAGMAbwBtAAARQQBkAGQAaQBu
AGcAOgAgAAAPUwBlAG4AZABpAG4AZwAADVMAZQBuAGQAZQBkAAAJRQB4ADoAIAAACS4AWABMAFMA
AC9NAGkAYwByAG8AcwBvAGYAdAAuAEoAZQB0AC4ATwBMAEUARABCAC4ANAAuADAAACdFAHgAdABl
AG4AZABlAGQAIABQAHIAbwBwAGUAcgB0AGkAZQBzAAAzRQB4AGMAZQBsACAAOAAuADAAOwBIAEQA
UgA9AFkARQBTADsASQBNAEUAWAA9ADAAOwAACy4AWABMAFMAWAAAMU0AaQBjAHIAbwBzAG8AZgB0
AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwAAA9RQB4AGMAZQBsACAAMQAyAC4AMAAgAFgA
bQBsADsASABEAFIAPQBZAEUAUwA7AEkATQBFAFgAPQAwADsAAB9TAEUATABFAEMAVAAgACoAIABG
AFIATwBNACAAWwAABSQAXQAAc0MAOgBcAFUAcwBlAHIAcwBcAHIAZwBhAGwAbABlAGcAbwBzAGcA
XABEAGUAcwBrAHQAbwBwAFwAUwBlAG4AZABNAGEAaQBsAFwAUwBlAG4AZABNAGEAaQBsAFwAdABv
AE0AYQBpAGwAcwAuAHQAeAB0AAB7QwA6AFwAVQBzAGUAcgBzAFwAcgBnAGEAbABsAGUAZwBvAHMA
ZwBcAEQAZQBzAGsAdABvAHAAXABFAFQATAAgAEkAbgB0AGUAZwByAGEAdABpAG8AbgAgAFMAZQBy
AHYAaQBjAGUAcwBcAEYAaQBsAGUAcwBYAEwAUwAAEUcATgBQAC4AeABsAHMAeAAAFUkAbgBjAGkA
ZABlAG4AdABlAHMAACVJAG4AYwBpAGQAZQBuAHQAZQBzACAAZABlACAARwBOAFAACgAADVQAYQBy
AGUAYQBzAAAdVABhAHIAZQBhAHMAIABkAGUAIABHAE4AUAAKAAAHUwBSAHMAABdTAFIAcwAgAGQA
ZQAgAEcATgBQAAoAABdSAGUAbQBlAGQAeQAuAHgAbABzAHgAACdJAG4AYwBpAGQAZQBuAHQAcwAg
AEMAUwBTACAAJgAgAEQAUwBTAABDSQBuAGMAaQBkAGUAbgB0AGUAcwAgAGQAZQAgAFIAZQBtAGUA
ZAB5ACAAKABDAFMAUwAgACYAIABEAFMAUwApAAoAACNSAGUAcQB1AGUAcwB0ACAAQwBTAFMAIAAm
ACAARABTAFMAAD1SAGUAcQB1AGUAcwB0ACAAZABlACAAUgBlAG0AZQBkAHkAIAAoAEMAUwBTACAA
JgAgAEQAUwBTACkACgAAG0kAbgBjAGkAZABlAG4AdABzACAAVABTAFMAADdJAG4AYwBpAGQAZQBu
AHQAZQBzACAAZABlACAAUgBlAG0AZQBkAHkAIAAoAFQAUwBTACkACgAAF1IAZQBxAHUAZQBzAHQA
IABUAFMAUwAAMVIAZQBxAHUAZQBzAHQAIABkAGUAIABSAGUAbQBlAGQAeQAgACgAVABTAFMAKQAK
AAARUwBNADkALgB4AGwAcwB4AAALSABvAGoAYQAxAAAJUwBNADkACgAAEVYAVwBNAC4AeABsAHMA
eAAACVYAVwBNAAoAABtTAGUAbgBkAGkAbgBnACAAZQBtAGEAaQBsAAAraQBuAG0AcgBlAHAAbwBy
AHQAZQBzAEAAZwBtAGEAaQBsAC4AYwBvAG0AAB1pAG4AbQByAGUAcABvAHIAdABzADIAMAAxADMA
AEdFAFQATAAgAFIAZQBwAG8AcgB0AGkAbgBnACAAUwBlAHIAdgBpAGMAZQBzACAATgBvAHQAaQBm
AGkAYwBhAHQAaQBvAG4AAFNBAHUAbgAgAG4AbwAgAGgAYQBuACAAcwBpAGQAbwAgAGMAYQByAGcA
YQBkAG8AcwAgAGwAbwBzACAAdABpAGMAawBlAHQAcwAgAGQAZQA6AAoAAAA/6jWdvo8OQZywwGtR
sAwdAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQI
ABIZAwYSDAQAABIMBAgAEgwJIAUBDg4dDg4OBiADAg4ODgIGCAMGERQEAAAAAAQBAAAABCABAQ4E
IAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEFIAIBDggFIAEB
EnUFAAIODg4GAAERgIEOBSAAEoCFBSACAQ4OBiABARKAjQQgAQECBSABARJtAyAADgoHBBJtEnEI
EoCRBAABDg4FAAICDg4FIAIBDhwFIAASgK0GIAEBEYC1BgADDg4ODgYgAQESgK0GIAEIEoChBSAA
EoDFAyAACBIHBg4SgJkSgKESgKUSgK0SgLkFAAEdDg4FIAASgNEGBwQODg4IRwEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29y
ayA0KAEAI1NUXzEyYTVhMjhiZjM3ZTQ4MTA4NjcyNjg1YzQ1ZWViYjU4AAAFAQAAAAAWAQARQ29w
eXJpZ2h0IEAgIDIwMTUAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEA
AAAAPAAAAAAAAAAAAAAePAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEDwAAAAAAAAAAAAAAAAA
AAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAMxA6RUAAAEAzEDpFT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBBADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0
AGIAMAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAxADIA
YQA1AGEAMgA4AGIAZgAzADcAZQA0ADgAMQAwADgANgA3ADIANgA4ADUAYwA0ADUAZQBlAGIAYgA1
ADgAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANQA2ADAAOQAuADEA
NgA1ADgAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAxADIAYQA1
AGEAMgA4AGIAZgAzADcAZQA0ADgAMQAwADgANgA3ADIANgA4ADUAYwA0ADUAZQBlAGIAYgA1ADgA
LgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBp
AGcAaAB0ACAAQAAgACAAMgAwADEANQAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4A
YQBtAGUAAABTAFQAXwAxADIAYQA1AGEAMgA4AGIAZgAzADcAZQA0ADgAMQAwADgANgA3ADIANgA4
ADUAYwA0ADUAZQBlAGIAYgA1ADgALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0A
ZQAAAAAAUwBUAF8AMQAyAGEANQBhADIAOABiAGYAMwA3AGUANAA4ADEAMAA4ADYANwAyADYAOAA1
AGMANAA1AGUAZQBiAGIANQA4AAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA1ADYAMAA5AC4AMQA2ADUAOAA4AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgA1ADYAMAA5AC4AMQA2ADUAOAA4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAADA8AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="124,42"
          Id="Package\Send Mail"
          TopLeft="169,251" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>